#!/usr/bin/env python3
"""
Script de diagnostic Railway - Version simplifi√©e
"""
import os
import sys
import logging
import sqlite3

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_railway_users():
    """V√©rifie les utilisateurs sur Railway"""
    logger.info("üîç V√âRIFICATION UTILISATEURS RAILWAY")
    logger.info("=" * 50)
    
    # V√©rifier l'environnement Railway
    railway_env = os.environ.get('RAILWAY_ENVIRONMENT')
    if railway_env:
        logger.info(f"‚úÖ Environnement Railway d√©tect√©: {railway_env}")
    else:
        logger.info("‚ÑπÔ∏è  Ex√©cution locale")
    
    # V√©rifier la base de donn√©es
    db_path = "users.db"
    logger.info(f"üìÅ V√©rification de {db_path}")
    
    if not os.path.exists(db_path):
        logger.error(f"‚ùå {db_path} n'existe pas")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # V√©rifier la table users
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users'")
        if not cursor.fetchone():
            logger.error("‚ùå Table 'users' n'existe pas")
            conn.close()
            return False
        
        logger.info("‚úÖ Table 'users' existe")
        
        # Compter les utilisateurs
        cursor.execute("SELECT COUNT(*) FROM users")
        count = cursor.fetchone()[0]
        logger.info(f"üìä Nombre d'utilisateurs: {count}")
        
        if count == 0:
            logger.error("‚ùå Aucun utilisateur dans la base de donn√©es")
            conn.close()
            return False
        
        # Lister les utilisateurs
        cursor.execute("SELECT username, role, is_active FROM users")
        users = cursor.fetchall()
        
        logger.info("üë• Utilisateurs existants:")
        for username, role, is_active in users:
            status = "‚úÖ Actif" if is_active else "‚ùå Inactif"
            logger.info(f"   - {username} ({role}) - {status}")
        
        # V√©rifier sp√©cifiquement admin et trainer
        cursor.execute("SELECT username FROM users WHERE username IN ('admin', 'trainer')")
        admin_trainer = cursor.fetchall()
        
        if len(admin_trainer) < 2:
            logger.error("‚ùå Utilisateurs admin/trainer manquants")
            conn.close()
            return False
        
        logger.info("‚úÖ Utilisateurs admin et trainer pr√©sents")
        
        conn.close()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur base de donn√©es: {e}")
        return False

def create_railway_users():
    """Cr√©e les utilisateurs sur Railway"""
    logger.info("\nüîß CR√âATION UTILISATEURS RAILWAY")
    logger.info("=" * 50)
    
    try:
        from user_manager import UserManager
        user_manager = UserManager()
        
        users = [
            ('admin', 'admin@playnext.com', 'FDJ2024!Admin', 'admin'),
            ('trainer', 'trainer@playnext.com', 'Trainer2024!', 'trainer')
        ]
        
        created_count = 0
        
        for username, email, password, role in users:
            # V√©rifier si l'utilisateur existe
            existing_user = user_manager.get_user_by_username(username)
            if existing_user:
                logger.info(f"‚ÑπÔ∏è  Utilisateur '{username}' existe d√©j√†")
                continue
            
            # Cr√©er l'utilisateur
            if user_manager.create_user(username, email, password, role):
                logger.info(f"‚úÖ Utilisateur '{username}' cr√©√©")
                created_count += 1
            else:
                logger.error(f"‚ùå √âchec cr√©ation '{username}'")
        
        logger.info(f"üéâ {created_count} utilisateur(s) cr√©√©(s)")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur cr√©ation utilisateurs: {e}")
        return False

if __name__ == "__main__":
    logger.info("üöÄ DIAGNOSTIC RAILWAY")
    
    # V√©rifier les utilisateurs existants
    users_exist = check_railway_users()
    
    if not users_exist:
        logger.info("\nüîß Tentative de cr√©ation des utilisateurs...")
        create_success = create_railway_users()
        
        if create_success:
            logger.info("\n‚úÖ Utilisateurs cr√©√©s avec succ√®s!")
            logger.info("üîê IDENTIFIANTS:")
            logger.info("   Admin: admin / FDJ2024!Admin")
            logger.info("   Trainer: trainer / Trainer2024!")
        else:
            logger.error("\n‚ùå √âchec de la cr√©ation des utilisateurs")
            sys.exit(1)
    else:
        logger.info("\n‚úÖ Utilisateurs d√©j√† pr√©sents")
        logger.info("üîê IDENTIFIANTS:")
        logger.info("   Admin: admin / FDJ2024!Admin")
        logger.info("   Trainer: trainer / Trainer2024!")
    
    logger.info("\nüéØ DIAGNOSTIC TERMIN√â")
