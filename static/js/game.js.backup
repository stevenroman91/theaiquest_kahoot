// AI Acceleration EXEC - Game Logic

class GameController {
    constructor() {
        this.currentState = 'login';
        this.selectedChoices = {
            phase1: null,
            phase2: [],
            phase3: {},
            phase4: [],
            phase5: null
        };
        this.budget = 0;
        this.maxBudget = 30;
        this.currentPhaseNumber = 1; // Initialize current phase number
        
        this.initializeEventListeners();
    }

    initializeEventListeners() {
        // Login form avec validation améliorée
        document.getElementById('login-form').addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleLoginAndStart();
        });
        
        // Register form
        document.getElementById('register-form').addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleRegister();
        });
        
        // Navigation entre login et register
        document.getElementById('show-register-form').addEventListener('click', () => {
            this.showRegisterForm();
        });
        
        document.getElementById('show-login-form').addEventListener('click', () => {
            this.showLoginForm();
        });
        
        // Validation en temps réel pour login
        document.getElementById('username').addEventListener('input', () => {
            this.validateUsernameField();
        });
        
        document.getElementById('password').addEventListener('input', () => {
            this.validatePasswordField();
        });
        
        // Validation en temps réel pour register
        document.getElementById('reg-username').addEventListener('input', () => {
            this.validateRegUsernameField();
        });
        
        document.getElementById('reg-email').addEventListener('input', () => {
            this.validateRegEmailField();
        });
        
        document.getElementById('reg-password').addEventListener('input', () => {
            this.validateRegPasswordField();
        });
        
        document.getElementById('reg-confirm-password').addEventListener('input', () => {
            this.validateRegConfirmPasswordField();
        });

        // Start game button (removed - handled by handleLoginAndStart)

        // Play again button
        document.getElementById('play-again-btn').addEventListener('click', () => {
            this.resetGame();
        });

        // Next button in score screen
        document.getElementById('next-button').addEventListener('click', () => {
            // Version 1.4: Get Phase number from the modal title or use stored value
            const phaseNumber = this.currentPhaseNumber || 1;
            console.log('Next button clicked, Phase number:', phaseNumber);
            
            // Hide the score modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('scoreModal'));
            if (modal) {
                modal.hide();
            }
            
            // Proceed directly to next phase
            this.proceedToActualNextPhase(phaseNumber);
        });

        // Skip video button
        document.getElementById('skip-video-btn').addEventListener('click', () => {
            this.skipVideo();
        });

        // Start game button (after video)
        document.getElementById('start-game-btn').addEventListener('click', () => {
            this.startGameAfterVideo();
        });

        // Next to Phase1 video button
        const nextToHarnessingBtn = document.getElementById('next-to-harnessing-btn');
        if (nextToHarnessingBtn) {
            nextToHarnessingBtn.addEventListener('click', () => {
                this.showPhase1Video();
            });
        }

        // Continue after Phase1 video button
        const continueAfterPhase1VideoBtn = document.getElementById('continue-after-phase1-video-btn');
        if (continueAfterPhase1VideoBtn) {
            continueAfterPhase1VideoBtn.addEventListener('click', () => {
                this.startPhase1Game();
            });
        }

        // Skip harnessing button
        const skipHarnessingBtn = document.getElementById('skip-harnessing-btn');
        if (skipHarnessingBtn) {
            skipHarnessingBtn.addEventListener('click', () => {
                this.skipHarnessingVideo();
            });
        }

        // Start game after harnessing button
        const startGameAfterHarnessingBtn = document.getElementById('start-game-after-harnessing-btn');
        if (startGameAfterHarnessingBtn) {
            startGameAfterHarnessingBtn.addEventListener('click', () => {
                this.showPhase1Video();
            });
        }

        // Phase2 confirm button
        const phase2ConfirmBtn = document.getElementById('phase2-confirm-btn');
        if (phase2ConfirmBtn) {
            phase2ConfirmBtn.addEventListener('click', () => {
                console.log('Phase2 confirm button clicked!');
                this.confirmPhase2Choices();
            });
        }

        // Phase3 confirm button
        const phase3ConfirmBtn = document.getElementById('phase3-confirm-btn');
        console.log('Phase3 confirm button found:', phase3ConfirmBtn);
        if (phase3ConfirmBtn) {
            phase3ConfirmBtn.addEventListener('click', () => {
                console.log('Phase3 confirm button clicked!');
                this.confirmPhase3Choices();
            });
        } else {
            console.log('Phase3 confirm button NOT FOUND!');
        }

        // Phase4 confirm button
        const phase4ConfirmBtn = document.getElementById('phase4-confirm-btn');
        console.log('Phase4 confirm button found:', phase4ConfirmBtn);
        if (phase4ConfirmBtn) {
            phase4ConfirmBtn.addEventListener('click', () => {
                console.log('=== Phase4 CONFIRM BUTTON CLICKED ===');
                this.confirmPhase4Choices();
            });
        } else {
            console.log('Phase4 confirm button NOT FOUND!');
        }

    }

    // Validation des champs de login
    validateUsernameField() {
        const usernameField = document.getElementById('username');
        const usernameError = document.getElementById('username-error');
        const value = usernameField.value.trim();
        
        if (!value) {
            usernameField.classList.add('is-invalid');
            usernameError.textContent = 'Username is required';
            return false;
        } else if (value.length < 2) {
            usernameField.classList.add('is-invalid');
            usernameError.textContent = 'Username must contain at least 2 characters';
            return false;
        } else if (value.length > 50) {
            usernameField.classList.add('is-invalid');
            usernameError.textContent = 'Username cannot exceed 50 characters';
            return false;
        } else {
            usernameField.classList.remove('is-invalid');
            usernameField.classList.add('is-valid');
            return true;
        }
    }
    
    validatePasswordField() {
        const passwordField = document.getElementById('password');
        const passwordError = document.getElementById('password-error');
        const value = passwordField.value;
        
        if (!value) {
            passwordField.classList.add('is-invalid');
            passwordError.textContent = 'Password is required';
            return false;
        } else if (value.length < 6) {
            passwordField.classList.add('is-invalid');
            passwordError.textContent = 'Password must contain at least 6 characters';
            return false;
        } else {
            passwordField.classList.remove('is-invalid');
            passwordField.classList.add('is-valid');
            return true;
        }
    }
    
    // Validation des champs d'inscription
    validateRegUsernameField() {
        const usernameField = document.getElementById('reg-username');
        const usernameError = document.getElementById('reg-username-error');
        const value = usernameField.value.trim();
        
        if (!value) {
            usernameField.classList.add('is-invalid');
            usernameError.textContent = 'Username is required';
            return false;
        } else if (value.length < 2) {
            usernameField.classList.add('is-invalid');
            usernameError.textContent = 'Username must contain at least 2 characters';
            return false;
        } else if (value.length > 50) {
            usernameField.classList.add('is-invalid');
            usernameError.textContent = 'Username cannot exceed 50 characters';
            return false;
        } else {
            usernameField.classList.remove('is-invalid');
            usernameField.classList.add('is-valid');
            return true;
        }
    }
    
    validateRegEmailField() {
        const emailField = document.getElementById('reg-email');
        const emailError = document.getElementById('reg-email-error');
        const value = emailField.value.trim();
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        
        if (!value) {
            emailField.classList.add('is-invalid');
            emailError.textContent = 'Email address is required';
            return false;
        } else if (!emailRegex.test(value)) {
            emailField.classList.add('is-invalid');
            emailError.textContent = 'Invalid email address';
            return false;
        } else {
            emailField.classList.remove('is-invalid');
            emailField.classList.add('is-valid');
            return true;
        }
    }
    
    validateRegPasswordField() {
        const passwordField = document.getElementById('reg-password');
        const passwordError = document.getElementById('reg-password-error');
        const value = passwordField.value;
        
        if (!value) {
            passwordField.classList.add('is-invalid');
            passwordError.textContent = 'Password is required';
            return false;
        } else if (value.length < 6) {
            passwordField.classList.add('is-invalid');
            passwordError.textContent = 'Password must contain at least 6 characters';
            return false;
        } else {
            passwordField.classList.remove('is-invalid');
            passwordField.classList.add('is-valid');
            return true;
        }
    }
    
    validateRegConfirmPasswordField() {
        const passwordField = document.getElementById('reg-password');
        const confirmField = document.getElementById('reg-confirm-password');
        const confirmError = document.getElementById('reg-confirm-password-error');
        const value = confirmField.value;
        
        if (!value) {
            confirmField.classList.add('is-invalid');
            confirmError.textContent = 'Password confirmation is required';
            return false;
        } else if (value !== passwordField.value) {
            confirmField.classList.add('is-invalid');
            confirmError.textContent = 'Passwords do not match';
            return false;
        } else {
            confirmField.classList.remove('is-invalid');
            confirmField.classList.add('is-valid');
            return true;
        }
    }
    
    // Navigation entre formulaires
    showLoginForm() {
        document.getElementById('login-section').style.display = 'block';
        document.getElementById('register-section').style.display = 'none';
    }
    
    showRegisterForm() {
        document.getElementById('login-section').style.display = 'none';
        document.getElementById('register-section').style.display = 'block';
    }
    
    showLoginAlert(message, type = 'danger') {
        const alert = document.getElementById('login-alert');
        const alertMessage = document.getElementById('login-alert-message');
        
        alert.className = `alert alert-${type} alert-dismissible fade show`;
        alertMessage.textContent = message;
        alert.style.display = 'block';
        
        // Auto-hide après 5 secondes pour les messages de succès
        if (type === 'success') {
            setTimeout(() => {
                alert.style.display = 'none';
            }, 5000);
        }
    }
    
    showRegisterAlert(message, type = 'danger') {
        const alert = document.getElementById('register-alert');
        const alertMessage = document.getElementById('register-alert-message');
        
        alert.className = `alert alert-${type} alert-dismissible fade show`;
        alertMessage.textContent = message;
        alert.style.display = 'block';
        
        // Auto-hide après 5 secondes pour les messages de succès
        if (type === 'success') {
            setTimeout(() => {
                alert.style.display = 'none';
            }, 5000);
        }
    }
    
    hideLoginAlert() {
        const alert = document.getElementById('login-alert');
        alert.style.display = 'none';
    }
    
    hideRegisterAlert() {
        const alert = document.getElementById('register-alert');
        alert.style.display = 'none';
    }
    
    setLoginLoading(loading) {
        const submitBtn = document.getElementById('login-submit-btn');
        const btnText = document.getElementById('login-btn-text');
        const btnLoading = document.getElementById('login-btn-loading');
        
        if (loading) {
            submitBtn.disabled = true;
            btnText.style.display = 'none';
            btnLoading.style.display = 'inline';
        } else {
            submitBtn.disabled = false;
            btnText.style.display = 'inline';
            btnLoading.style.display = 'none';
        }
    }
    
    setRegisterLoading(loading) {
        const submitBtn = document.getElementById('register-submit-btn');
        const btnText = document.getElementById('register-btn-text');
        const btnLoading = document.getElementById('register-btn-loading');
        
        if (loading) {
            submitBtn.disabled = true;
            btnText.style.display = 'none';
            btnLoading.style.display = 'inline';
        } else {
            submitBtn.disabled = false;
            btnText.style.display = 'inline';
            btnLoading.style.display = 'none';
        }
    }

    async handleLoginAndStart() {
        console.log('🔐 handleLoginAndStart called');
        
        // Validation côté client
        const isUsernameValid = this.validateUsernameField();
        const isPasswordValid = this.validatePasswordField();
        
        console.log('✅ Validation:', { isUsernameValid, isPasswordValid });
        
        if (!isUsernameValid || !isPasswordValid) {
            this.showLoginAlert('Please correct the errors in the form', 'warning');
            return;
        }
        
        const username = document.getElementById('username').value.trim();
        const password = document.getElementById('password').value;
        
        console.log('📝 Login attempt:', { username, passwordLength: password.length });
        
        this.setLoginLoading(true);
        this.hideLoginAlert();

        try {
            // Login
            const loginResponse = await fetch('/api/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include',
                body: JSON.stringify({ username, password })
            });

            const loginData = await loginResponse.json();
            console.log('📡 Login response:', loginData);
            
            if (loginData.success) {
                console.log('✅ Login successful, starting game...');
                
                // Start game
                const startResponse = await fetch('/api/start_game', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    credentials: 'include'
                });

                const startData = await startResponse.json();
                console.log('🎮 Start game response:', startData);

                if (startData.success) {
                    console.log('🎯 Game started successfully');
                    // Hide login and show video
                    document.getElementById('login-section').style.display = 'none';
                    this.showSection('video-intro-section');
                    document.getElementById('progress-card').style.display = 'block';
                    this.updateProgress(10, 'Introduction Video');
                    
                    // Initialize intro video with sound
                    initializeIntroVideo();
                    
                    // Reset button states
                    document.getElementById('skip-video-btn').style.display = 'inline-block';
                    document.getElementById('start-game-btn').style.display = 'none';
                } else {
                    console.log('❌ Error starting game');
                    this.showLoginAlert('Error starting the game', 'danger');
                }
            } else {
                console.log('❌ Login failed:', loginData.message);
                this.showLoginAlert(loginData.message, 'danger');
            }
        } catch (error) {
            console.error('Login error:', error);
            this.showLoginAlert('Server connection error', 'danger');
        } finally {
            this.setLoginLoading(false);
        }
    }
    
    async handleRegister() {
        // Validation côté client
        const isUsernameValid = this.validateRegUsernameField();
        const isEmailValid = this.validateRegEmailField();
        const isPasswordValid = this.validateRegPasswordField();
        const isConfirmPasswordValid = this.validateRegConfirmPasswordField();
        
        if (!isUsernameValid || !isEmailValid || !isPasswordValid || !isConfirmPasswordValid) {
            this.showRegisterAlert('Please correct the errors in the form', 'warning');
            return;
        }
        
        const username = document.getElementById('reg-username').value.trim();
        const email = document.getElementById('reg-email').value.trim();
        const password = document.getElementById('reg-password').value;
        
        this.setRegisterLoading(true);
        this.hideRegisterAlert();
        
        try {
            // Register
            const registerResponse = await fetch('/api/register', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include',
                body: JSON.stringify({ username, email, password })
            });

            const registerData = await registerResponse.json();

            if (registerData.success) {
                this.showRegisterAlert(registerData.message, 'success');
                
                // Retourner au formulaire de login après 2 secondes
                setTimeout(() => {
                    this.showLoginForm();
                    // Pré-remplir le nom d'utilisateur
                    document.getElementById('username').value = username;
                }, 2000);
            } else {
                this.showRegisterAlert(registerData.message, 'danger');
            }
        } catch (error) {
            console.error('Register error:', error);
            this.showRegisterAlert('Server connection error', 'danger');
        } finally {
            this.setRegisterLoading(false);
        }
    }

    showSection(sectionId) {
        console.log('showSection called with:', sectionId);
        
        // Hide all sections
        document.querySelectorAll('[id$="-section"]').forEach(section => {
            section.style.display = 'none';
        });
        
        // Show target section
        const targetSection = document.getElementById(sectionId);
        console.log('Target section found:', targetSection);
        if (targetSection) {
            targetSection.style.display = 'block';
            console.log('Section', sectionId, 'should now be visible');
        } else {
            console.error('Section not found:', sectionId);
        }
    }

    updateProgress(percentage, text) {
        const progressBar = document.getElementById('progress-bar');
        const progressText = document.getElementById('progress-text');
        
        if (progressBar) {
            progressBar.style.width = `${percentage}%`;
        }
        
        if (progressText) {
            progressText.textContent = text;
        }
    }

    showAlert(message, type) {
        const alertContainer = document.getElementById('alert-container');
        const alertId = 'alert-' + Date.now();
        
        const alertHTML = `
            <div id="${alertId}" class="alert alert-${type} alert-dismissible fade show" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        `;
        
        alertContainer.insertAdjacentHTML('beforeend', alertHTML);
        
        // Auto-remove after 5 seconds
        setTimeout(() => {
            const alertElement = document.getElementById(alertId);
            if (alertElement) {
                alertElement.remove();
            }
        }, 5000);
    }

    skipVideo() {
        // Arrêter la vidéo actuelle avant de passer à la suivante
        const currentVideo = document.getElementById('intro-video');
        if (currentVideo) {
            currentVideo.pause();
            currentVideo.currentTime = 0;
        }
        
        // Passer directement à la vidéo intro (intro.mp4)
        this.showSection('harnessing-video-section');
        this.updateProgress(20, 'Introduction');
        
        // Initialize intro video
        initializeHarnessingVideo();
        
        // Reset button states
        document.getElementById('skip-harnessing-btn').style.display = 'inline-block';
        document.getElementById('start-game-after-harnessing-btn').style.display = 'none';
    }

    startGameAfterVideo() {
        // Hide video and show intro video (intro.mp4)
        this.showSection('harnessing-video-section');
        this.updateProgress(20, 'Introduction');
        
        // Initialize intro video
        initializeHarnessingVideo();
        
        // Reset button states
        document.getElementById('skip-harnessing-btn').style.display = 'inline-block';
        document.getElementById('start-game-after-harnessing-btn').style.display = 'none';
    }

    showPhase1Video() {
        // Hide harnessing video section completely
        document.getElementById('harnessing-video-section').style.display = 'none';
        
        // Show Phase1 video
        this.showSection('phase1-video-section');
        this.updateProgress(30, 'Phase 1 - Embedding GenAI');
        
        // Initialize Phase1 video
        initializePhase1Video();
    }

    showHarnessingVideo() {
        // Hide game intro completely
        document.getElementById('game-intro').style.display = 'none';
        
        // Show harnessing video
        this.showSection('harnessing-video-section');
        this.updateProgress(30, 'Vidéo Introduction');
        
        // Initialize harnessing video
        initializeHarnessingVideo();
        
        // Reset button states
        document.getElementById('skip-harnessing-btn').style.display = 'inline-block';
        document.getElementById('start-game-after-harnessing-btn').style.display = 'none';
    }

    skipHarnessingVideo() {
        // Arrêter la vidéo harnessing avant de passer à la suivante
        const harnessingVideo = document.getElementById('harnessing-video');
        if (harnessingVideo) {
            harnessingVideo.pause();
            harnessingVideo.currentTime = 0;
        }
        
        // Hide harnessing video section completely
        document.getElementById('harnessing-video-section').style.display = 'none';
        
        // Go to Phase1 video
        this.showPhase1Video();
    }

    startPhase1Game() {
        // Hide Phase1 video section completely
        document.getElementById('phase1-video-section').style.display = 'none';
        
        // Go directly to Phase1 game
        this.loadPhase1Choices();
        this.updateProgress(50, 'Game Start');
    }

    async loadPhase1Choices() {
        try {
            const response = await fetch('/api/phase1/choices', {
                credentials: 'include'
            });
            const data = await response.json();

            if (data.success) {
                this.renderPhase1Choices(data.choices);
                this.showSection('phase1-section');
            }
        } catch (error) {
            this.showAlert('Erreur lors du chargement des choix', 'danger');
        }
    }

    renderPhase1Choices(choices) {
        const container = document.getElementById('phase1-choices');
        container.innerHTML = '';

        choices.forEach(choice => {
            const card = document.createElement('div');
            card.className = 'col-md-4 mb-3';
            card.innerHTML = `
                <div class="card choice-card" data-choice-id="${choice.id}">
                    <div class="card-body">
                        <h5 class="card-title">${choice.title}</h5>
                        <p class="card-text">${choice.description}</p>
                        <div class="text-center">
                            <button class="btn btn-outline-primary btn-sm" onclick="gameController.selectPhase1Choice('${choice.id}')">
                                Select
                            </button>
                        </div>
                    </div>
                </div>
            `;
            container.appendChild(card);
        });
    }

    async selectPhase1Choice(choiceId) {
        console.log('Phase1 choice selected:', choiceId);
        this.showLoading(true);

        try {
            const response = await fetch('/api/phase1/choose', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include',
                body: JSON.stringify({ character_id: choiceId })
            });

            const data = await response.json();
            console.log('MOT1 API response:', data);

            if (data.success) {
                this.selectedChoices.phase1 = choiceId;
                console.log('Full API response:', data);
                console.log('Score data:', data.score);
                
                // Try different possible data structures
                let scoreData, phase1Score;
                if (data.score_info) {
                    scoreData = data.score_info;
                    phase1Score = data.score_info.scores.mot1;
                } else if (data.score) {
                    scoreData = data.score;
                    phase1Score = data.score.scores.mot1;
                } else {
                    console.error('No score data found in response');
                    this.showAlert('Erreur: données de score manquantes', 'danger');
                    return;
                }
                
                console.log('Score data extracted:', scoreData);
                console.log('Phase1 score:', phase1Score);
                
                this.updateScoreDisplay(scoreData);
                this.showScoreScreen(1, phase1Score, scoreData);
                this.updateProgress(40, `Phase 1 completed - Score: ${phase1Score}/3`);
            } else {
                this.showAlert(data.message, 'danger');
            }
        } catch (error) {
            console.error('MOT1 selection error:', error);
            this.showAlert('Erreur lors de la sélection', 'danger');
        } finally {
            this.showLoading(false);
        }
    }

    async loadPhase2Choices() {
        console.log('Loading Phase2 choices...');
        try {
            const response = await fetch('/api/phase2/choices', {
                credentials: 'include'
            });
            const data = await response.json();
            console.log('Phase2 API response:', data);

            if (data.success) {
                console.log('Phase2 choices loaded successfully, rendering...');
                this.renderPhase2Choices(data.choices);
                console.log('Showing phase2-section...');
                this.showSection('phase2-section');
                console.log('Phase2 section should now be visible');
            } else {
                console.error('Phase2 API failed:', data.message);
                this.showAlert('Erreur lors du chargement des choix Phase2: ' + data.message, 'danger');
            }
        } catch (error) {
            console.error('Phase2 loading error:', error);
            this.showAlert('Erreur de connexion lors du chargement des choix Phase2', 'danger');
        }
    async loadPhase3Choices() {
        console.log('Loading Phase3 choices...');
        try {
            const response = await fetch('/api/phase3/choices', {
                credentials: 'include'
            });
            const data = await response.json();
            console.log('Phase3 API response:', data);

            if (data.success) {
                console.log('Phase3 choices loaded successfully, rendering...');
                this.renderPhase3Choices(data.choices);
                console.log('Showing phase3-section...');
                this.showSection('phase3-section');
                console.log('Phase3 section should now be visible');
            } else {
                console.error('Phase3 API failed:', data.message);
                this.showAlert('Erreur lors du chargement des choix Phase3: ' + data.message, 'danger');
            }
        } catch (error) {
            console.error('Phase3 loading error:', error);
            this.showAlert('Erreur de connexion lors du chargement des choix Phase3', 'danger');
        }
    }

    async loadPhase4Choices() {
        console.log('Loading Phase4 choices...');
        try {
            const response = await fetch('/api/phase4/choices', {
                credentials: 'include'
            });
            const data = await response.json();
            console.log('Phase4 API response:', data);

            if (data.success) {
                console.log('Phase4 choices loaded successfully, rendering...');
                this.renderPhase4Choices(data.choices);
                console.log('Showing phase4-section...');
                this.showSection('phase4-section');
                console.log('Phase4 section should now be visible');
            } else {
                console.error('Phase4 API failed:', data.message);
                this.showAlert('Erreur lors du chargement des choix Phase4: ' + data.message, 'danger');
            }
        } catch (error) {
            console.error('Phase4 loading error:', error);
            this.showAlert('Erreur de connexion lors du chargement des choix Phase4', 'danger');
        }
    }

    async loadPhase5Choices() {
        console.log('Loading Phase5 choices...');
        try {
            const response = await fetch('/api/phase5/choices', {
                credentials: 'include'
            });
            const data = await response.json();
            console.log('Phase5 API response:', data);

            if (data.success) {
                console.log('Phase5 choices loaded successfully, rendering...');
                this.renderPhase5Choices(data.choices);
                console.log('Showing phase5-section...');
                this.showSection('phase5-section');
                console.log('Phase5 section should now be visible');
            } else {
                console.error('Phase5 API failed:', data.message);
                this.showAlert('Erreur lors du chargement des choix Phase5: ' + data.message, 'danger');
            }
        } catch (error) {
            console.error('Phase5 loading error:', error);
            this.showAlert('Erreur de connexion lors du chargement des choix Phase5', 'danger');
        }
    }

    renderPhase2Choices(choices) {
        const container = document.getElementById('phase2-choices');
        container.innerHTML = '';

        choices.forEach(choice => {
            const card = document.createElement('div');
            card.className = 'col-md-4 mb-3';
            card.innerHTML = `
                <div class="card choice-card" data-choice-id="${choice.id}">
                    <div class="card-body">
                        <h5 class="card-title">${choice.title}</h5>
                        <p class="card-text">${choice.description}</p>
                        <div class="text-center">
                            <button class="btn btn-outline-primary btn-sm" onclick="gameController.selectMOT2Choice('${choice.id}')">
                                Select
                            </button>
                        </div>
                    </div>
                </div>
            `;
            container.appendChild(card);
        });
    }

    async selectMOT2Choice(choiceId) {
        if (this.selectedChoices.phase2.includes(choiceId)) {
            // Deselect
            this.selectedChoices.phase2 = this.selectedChoices.phase2.filter(id => id !== choiceId);
        } else if (this.selectedChoices.phase2.length < 3) {
            // Select
            this.selectedChoices.phase2.push(choiceId);
        } else {
            this.showAlert('Vous ne pouvez sélectionner que 3 solutions maximum', 'warning');
            return;
        }

        this.updateMOT2UI();
        
        // Show confirm button when 3 choices are made
        console.log('MOT2 selected choices:', this.selectedChoices.phase2.length);
        if (this.selectedChoices.phase2.length === 3) {
            const confirmBtn = document.getElementById('phase2-confirm-btn');
            console.log('Confirm button found:', confirmBtn);
            if (confirmBtn) {
                confirmBtn.disabled = false;
                confirmBtn.classList.remove('btn-secondary');
                confirmBtn.classList.add('btn-primary');
                console.log('Button enabled and styled');
            }
        } else {
            const confirmBtn = document.getElementById('phase2-confirm-btn');
            if (confirmBtn) {
                confirmBtn.disabled = true;
                confirmBtn.classList.remove('btn-primary');
                confirmBtn.classList.add('btn-secondary');
            }
        }
    }

    updateMOT2UI() {
        const cards = document.querySelectorAll('#phase2-choices .choice-card');
        cards.forEach(card => {
            const choiceId = card.getAttribute('data-choice-id');
            const button = card.querySelector('button');
            
            if (this.selectedChoices.phase2.includes(choiceId)) {
                card.classList.add('selected');
                button.textContent = 'Désélectionner';
                button.classList.remove('btn-outline-primary');
                button.classList.add('btn-primary');
            } else {
                card.classList.remove('selected');
                button.textContent = 'Select';
                button.classList.remove('btn-primary');
                button.classList.add('btn-outline-primary');
            }
        });

        // Update counter
        const counter = document.getElementById('phase2-selected-count');
        if (counter) {
            counter.textContent = `${this.selectedChoices.phase2.length}/3 selected`;
        }

    }

    async confirmMOT2Choices() {
        this.showLoading(true);

        try {
            const response = await fetch('/api/phase2/choose', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include',
                body: JSON.stringify({ solution_ids: this.selectedChoices.phase2 })
            });

            const data = await response.json();

            if (data.success) {
                const phase2Score = data.score.scores.phase2;
                this.updateScoreDisplay(data.score);
                this.showScoreScreen(2, phase2Score, data.score);
                this.updateProgress(60, `Phase 2 completed - Score: ${phase2Score}/3`);
            } else {
                this.showAlert(data.message, 'danger');
            }
        } catch (error) {
            console.error('MOT2 confirmation error:', error);
            this.showAlert('Erreur lors de la confirmation', 'danger');
        } finally {
            this.showLoading(false);
        }
    }

    async loadMOT3Choices() {
        try {
            console.log('Loading MOT3 choices...');
            const response = await fetch('/api/phase3/choices', {
                credentials: 'include'
            });
            const data = await response.json();
            console.log('MOT3 API response:', data);

            if (data.success) {
                console.log('MOT3 choices data:', data.choices);
                this.renderMOT3Choices(data.choices);
                this.showSection('phase3-section');
                console.log('MOT3 section shown');
            } else {
                console.error('MOT3 API failed:', data.message);
                this.showAlert('Erreur lors du chargement des choix MOT3: ' + data.message, 'danger');
            }
        } catch (error) {
            console.error('MOT3 loading error:', error);
            this.showAlert('Erreur lors du chargement des choix', 'danger');
        }
    }

    renderMOT3Choices(choices) {
        const container = document.getElementById('phase3-choices');
        container.innerHTML = '';

        Object.entries(choices).forEach(([category, categoryChoices]) => {
            const categoryDiv = document.createElement('div');
            categoryDiv.className = 'mb-4';
            categoryDiv.innerHTML = `
                <h5>${category}</h5>
                <div class="row">
                    ${categoryChoices.map(choice => `
                        <div class="col-md-6 mb-3">
                            <div class="card choice-card" data-choice-id="${choice.id}" data-category="${category}">
                                <div class="card-body">
                                    <h6 class="card-title">${choice.title}</h6>
                                    <p class="card-text">${choice.description}</p>
                                    <div class="text-center">
                                        <button class="btn btn-outline-primary btn-sm" onclick="gameController.selectMOT3Choice('${choice.id}', '${category}')">
                                            Select
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
            container.appendChild(categoryDiv);
        });
    }

    async selectMOT3Choice(choiceId, category) {
        console.log('MOT3 choice selected:', choiceId, 'for category:', category);
        this.selectedChoices.phase3[category] = choiceId;
        console.log('MOT3 selected choices:', this.selectedChoices.phase3);
        this.updateMOT3UI();
        
        // Check if all categories are selected
        const allCategories = ['people', 'strategy', 'tech'];
        const selectedCategories = Object.keys(this.selectedChoices.phase3);
        console.log('All categories:', allCategories);
        console.log('Selected categories:', selectedCategories);
        
        // Enable/disable confirm button
        const confirmBtn = document.getElementById('phase3-confirm-btn');
        if (confirmBtn) {
            if (allCategories.every(cat => selectedCategories.includes(cat))) {
                confirmBtn.disabled = false;
                confirmBtn.classList.remove('btn-secondary');
                confirmBtn.classList.add('btn-primary');
                console.log('MOT3 confirm button enabled');
            } else {
                confirmBtn.disabled = true;
                confirmBtn.classList.remove('btn-primary');
                confirmBtn.classList.add('btn-secondary');
            }
        }
    }

    updateMOT3UI() {
        const cards = document.querySelectorAll('#phase3-choices .choice-card');
        cards.forEach(card => {
            const choiceId = card.getAttribute('data-choice-id');
            const category = card.getAttribute('data-category');
            const button = card.querySelector('button');
            
            if (this.selectedChoices.phase3[category] === choiceId) {
                card.classList.add('selected');
                button.textContent = 'Sélectionné';
                button.classList.remove('btn-outline-primary');
                button.classList.add('btn-success');
                button.disabled = true;
            } else {
                card.classList.remove('selected');
                button.textContent = 'Select';
                button.classList.remove('btn-success');
                button.classList.add('btn-outline-primary');
                button.disabled = false;
            }
        });
    }

    async confirmMOT3Choices() {
        this.showLoading(true);

        try {
            const response = await fetch('/api/phase3/choose', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include',
                body: JSON.stringify({ choices: this.selectedChoices.phase3 })
            });

            const data = await response.json();

            if (data.success) {
                const phase3Score = data.score.scores.phase3;
                this.updateScoreDisplay(data.score);
                this.showScoreScreen(3, phase3Score, data.score);
                this.updateProgress(80, `Phase 3 completed - Score: ${phase3Score}/3`);
            } else {
                this.showAlert(data.message, 'danger');
            }
        } catch (error) {
            console.error('MOT3 confirmation error:', error);
            this.showAlert('Erreur lors de la confirmation', 'danger');
        } finally {
            this.showLoading(false);
        }
    }

    async loadMOT4Choices() {
        // Reset budget for MOT4
        this.budget = 0;
        this.selectedChoices.phase4 = [];
        
        try {
            const response = await fetch('/api/phase4/choices');
            const data = await response.json();

            if (data.success) {
                this.renderMOT4Choices(data.choices);
                this.showSection('phase4-section');
            }
        } catch (error) {
            this.showAlert('Erreur lors du chargement des choix', 'danger');
        }
    }

    renderMOT4Choices(choices) {
        const container = document.getElementById('phase4-choices');
        container.innerHTML = '';

        choices.forEach(choice => {
            const card = document.createElement('div');
            card.className = 'col-md-4 mb-3';
            card.innerHTML = `
                <div class="card choice-card" data-choice-id="${choice.id}" data-cost="${choice.cost}">
                    <div class="card-body">
                        <h5 class="card-title">${choice.title}</h5>
                        <p class="card-text">${choice.description}</p>
                        <div class="text-center">
                            <span class="badge bg-info mb-2">${choice.cost} points</span><br>
                            <button class="btn btn-outline-primary btn-sm" onclick="gameController.selectMOT4Choice('${choice.id}', ${choice.cost})">
                                Select
                            </button>
                        </div>
                    </div>
                </div>
            `;
            container.appendChild(card);
        });
    }

    async selectMOT4Choice(choiceId, cost) {
        console.log('=== MOT4 CHOICE CLICKED ===');
        console.log('MOT4 choice selected:', choiceId, 'cost:', cost);
        console.log('Current budget:', this.budget, 'max:', this.maxBudget);
        console.log('Current choices:', this.selectedChoices.phase4);
        
        if (this.selectedChoices.phase4.includes(choiceId)) {
            // Deselect
            this.selectedChoices.phase4 = this.selectedChoices.phase4.filter(id => id !== choiceId);
            this.budget -= cost;
            console.log('Deselected, new budget:', this.budget);
        } else {
            // Check if adding this choice would exceed budget
            if (this.budget + cost > this.maxBudget) {
                this.showAlert(`Vous ne pouvez pas dépasser ${this.maxBudget} points`, 'warning');
                return;
            }
            
            // Select
            this.selectedChoices.phase4.push(choiceId);
            this.budget += cost;
            console.log('Selected, new budget:', this.budget);
        }

        this.updateMOT4UI();
        
        // Enable/disable confirm button
        const confirmBtn = document.getElementById('phase4-confirm-btn');
        if (confirmBtn) {
            if (this.budget === this.maxBudget) {
                confirmBtn.disabled = false;
                confirmBtn.classList.remove('btn-secondary');
                confirmBtn.classList.add('btn-primary');
                console.log('MOT4 confirm button enabled');
            } else {
                confirmBtn.disabled = true;
                confirmBtn.classList.remove('btn-primary');
                confirmBtn.classList.add('btn-secondary');
            }
        }
        
        // Note: No auto-confirmation for MOT4, user must click confirm button
    }

    updateMOT4UI() {
        const cards = document.querySelectorAll('#phase4-choices .choice-card');
        cards.forEach(card => {
            const choiceId = card.getAttribute('data-choice-id');
            const cost = parseInt(card.getAttribute('data-cost'));
            const button = card.querySelector('button');
            
            if (this.selectedChoices.phase4.includes(choiceId)) {
                card.classList.add('selected');
                button.textContent = 'Désélectionner';
                button.classList.remove('btn-outline-primary');
                button.classList.add('btn-primary');
            } else {
                card.classList.remove('selected');
                button.textContent = 'Select';
                button.classList.remove('btn-primary');
                button.classList.add('btn-outline-primary');
                
                // Disable if would exceed budget
                if (this.budget + cost > this.maxBudget) {
                    button.disabled = true;
                    button.classList.add('disabled');
                } else {
                    button.disabled = false;
                    button.classList.remove('disabled');
                }
            }
        });

        // Update budget display
        const budgetDisplay = document.getElementById('phase4-budget-display');
        if (budgetDisplay) {
            budgetDisplay.textContent = `${this.budget}/${this.maxBudget} points`;
            budgetDisplay.className = this.budget === this.maxBudget ? 'badge bg-success me-3' : 'badge me-3';
        }
    }

    async confirmMOT4Choices() {
        console.log('=== MOT4 CONFIRM CALLED ===');
        console.log('MOT4 confirm called with choices:', this.selectedChoices.phase4);
        console.log('MOT4 budget:', this.budget);
        console.log('Full selectedChoices object:', this.selectedChoices);
        this.showLoading(true);

        try {
            const response = await fetch('/api/phase4/choose', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ enabler_ids: this.selectedChoices.phase4 })
            });

            const data = await response.json();

            if (data.success) {
                const phase4Score = data.score.scores.phase4;
                this.updateScoreDisplay(data.score);
                this.showScoreScreen(4, phase4Score, data.score);
                this.updateProgress(90, `Phase 4 completed - Score: ${phase4Score}/3`);
            } else {
                this.showAlert(data.message, 'danger');
            }
        } catch (error) {
            console.error('MOT4 confirmation error:', error);
            this.showAlert('Erreur lors de la confirmation', 'danger');
        } finally {
            this.showLoading(false);
        }
    }

    async loadMOT5Choices() {
        try {
            const response = await fetch('/api/phase5/choices');
            const data = await response.json();

            if (data.success) {
                this.renderMOT5Choices(data.choices);
                this.showSection('phase5-section');
            }
        } catch (error) {
            this.showAlert('Erreur lors du chargement des choix', 'danger');
        }
    }

    renderMOT5Choices(choices) {
        const container = document.getElementById('phase5-choices');
        container.innerHTML = '';

        choices.forEach(choice => {
            const card = document.createElement('div');
            card.className = 'col-md-4 mb-3';
            card.innerHTML = `
                <div class="card choice-card" data-choice-id="${choice.id}">
                    <div class="card-body">
                        <h5 class="card-title">${choice.title}</h5>
                        <p class="card-text">${choice.description}</p>
                        <div class="text-center">
                            <button class="btn btn-outline-primary btn-sm" onclick="gameController.selectMOT5Choice('${choice.id}')">
                                Select
                            </button>
                        </div>
                    </div>
                </div>
            `;
            container.appendChild(card);
        });
    }

    async selectMOT5Choice(choiceId) {
        if (this.selectedChoices.phase5) {
            this.showAlert('Vous avez déjà fait votre choix pour MOT5', 'warning');
            return;
        }

        this.showLoading(true);

        try {
            const response = await fetch('/api/phase5/choose', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ choice_id: choiceId })
            });

            const data = await response.json();

            if (data.success) {
                this.selectedChoices.phase5 = choiceId;
                
                // Disable all MOT5 buttons
                document.querySelectorAll('#phase5-choices .choice-card').forEach(card => {
                    const button = card.querySelector('button');
                    button.disabled = true;
                    if (card.getAttribute('data-choice-id') === choiceId) {
                        card.classList.add('selected');
                        button.textContent = 'Sélectionné';
                        button.classList.remove('btn-outline-primary');
                        button.classList.add('btn-success');
                    }
                });

                // Show final results
                this.showResults(data.results);
                this.updateProgress(100, 'Jeu terminé !');
            } else {
                this.showAlert(data.message, 'danger');
            }
        } catch (error) {
            console.error('MOT5 selection error:', error);
            this.showAlert('Erreur lors de la sélection', 'danger');
        } finally {
            this.showLoading(false);
        }
    }

    updateScoreDisplay(scoreData) {
        // Update individual MOT scores
        Object.entries(scoreData.scores).forEach(([mot, score]) => {
            const scoreElement = document.getElementById(`${mot}-score`);
            if (scoreElement) {
                scoreElement.textContent = score;
            }
        });

        // Update total score
        const totalElement = document.getElementById('total-score');
        if (totalElement) {
            totalElement.textContent = scoreData.total;
        }
    }

    showScoreScreen(phaseNumber, score, scoreData) {
        // Store current Phase number for Next button
        this.currentPhaseNumber = phaseNumber;
        
        // Version 1.4: Hide score display card and total score in header
        document.getElementById('score-display-card').style.display = 'none';
        document.querySelector('.score-display-container').style.display = 'none';
        
        // Update score display
        this.updateScoreDisplay(scoreData);
        
        // Set Phase title
        const phaseTitles = {
            1: 'Embedding GenAI in your AI transformation program',
            2: 'Building the right foundation',
            3: 'Scaling across the organization',
            4: 'Ensuring sustainable success',
            5: 'Accelerating the transformation'
        };
        
        document.getElementById('current-mot-title').textContent = phaseTitles[phaseNumber];
        
        // Generate stars
        const starsContainer = document.getElementById('score-stars-container');
        starsContainer.innerHTML = '';
        for (let i = 1; i <= 3; i++) {
            const star = document.createElement('span');
            star.className = 'score-star';
            star.textContent = i <= score ? '★' : '☆';
            starsContainer.appendChild(star);
        }
        
        // Set description
        const descriptions = {
            1: score === 3 ? 'Excellent! You chose the optimal approach for embedding GenAI.' : 
               score === 2 ? 'Good choice! You\'re on the right track.' : 
               'Consider reviewing your approach for better results.',
            2: score === 3 ? 'Perfect! You selected the ideal foundation solutions.' : 
               score === 2 ? 'Good foundation! You made solid choices.' : 
               'Your foundation could be stronger.',
            3: score === 3 ? 'Outstanding! You\'ve mastered organizational scaling.' : 
               score === 2 ? 'Well done! Good scaling strategy.' : 
               'Consider improving your scaling approach.',
            4: score === 3 ? 'Excellent! You\'ve ensured sustainable success.' : 
               score === 2 ? 'Good sustainability planning!' : 
               'Your sustainability strategy needs work.',
            5: score === 3 ? 'Perfect! You\'ve accelerated the transformation.' : 
               score === 2 ? 'Good acceleration strategy!' : 
               'Consider optimizing your acceleration approach.'
        };
        
        document.getElementById('score-description').textContent = descriptions[phaseNumber];
        
        // Update Phase squares
        this.updatePhaseSquares(scoreData);
        
        // Update total badge
        this.updateTotalBadge(scoreData);
        
        // Show modal
        const modal = new bootstrap.Modal(document.getElementById('scoreModal'));
        modal.show();
        
        // Version 1.4: Auto-proceed to next phase after 3 seconds
        setTimeout(() => {
            console.log('Auto-proceeding to next phase after timeout');
            const modalInstance = bootstrap.Modal.getInstance(document.getElementById('scoreModal'));
            if (modalInstance) {
                modalInstance.hide();
            }
            this.proceedToActualNextPhase(phaseNumber);
        }, 3000);
        
        // Version 1.4: Keep the original behavior - user clicks NEXT button
        // The global score recap will be shown after the user clicks NEXT
    }

    updatePhaseSquares(scoreData) {
        console.log('Updating phase squares with score data:', scoreData);
        Object.entries(scoreData.scores).forEach(([mot, score]) => {
            // Convert mot1 to phase1, mot2 to phase2, etc.
            const phaseId = mot.replace('mot', 'phase');
            const square = document.getElementById(`${phaseId}-square`);
            console.log(`Looking for square: ${phaseId}-square, found:`, square);
            if (square) {
                square.classList.remove('completed');
                if (score > 0) {
                    square.classList.add('completed');
                    console.log(`Added completed class to ${phaseId}-square for score:`, score);
                }
            }
        });
    }

    updateTotalBadge(scoreData) {
        const badge = document.getElementById('total-badge');
        if (badge) {
            badge.textContent = `Total: ${scoreData.total}/15`;
        }
    }

    // Version 1.4: New function to show global score recap
    showGlobalScoreRecap(phaseNumber, scoreData) {
        console.log('showGlobalScoreRecap called with phaseNumber:', phaseNumber, 'scoreData:', scoreData);
        
        // Create global score recap modal if it doesn't exist
        if (!document.getElementById('globalScoreRecapModal')) {
            console.log('Creating global score recap modal...');
            this.createGlobalScoreRecapModal();
        }
        
        // Update the content
        console.log('Updating global score recap content...');
        this.updateGlobalScoreRecapContent(phaseNumber, scoreData);
        
        // Show the modal
        console.log('Showing global score recap modal...');
        const modal = new bootstrap.Modal(document.getElementById('globalScoreRecapModal'));
        modal.show();
        
        // Version 1.4: No auto-close - user must click continue button
        // Store current Phase number for continue button
        this.currentPhaseNumber = phaseNumber;
        console.log('Stored currentPhaseNumber:', this.currentPhaseNumber);
    }

    createGlobalScoreRecapModal() {
        const modalHTML = `
            <div class="modal fade" id="globalScoreRecapModal" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false">
                <div class="modal-dialog modal-fullscreen">
                    <div class="modal-content" style="background: linear-gradient(135deg, #1e40af 0%, #3b82f6 50%, #60a5fa 100%); border: none;">
                        <div class="modal-body p-0" style="height: 100vh; display: flex; flex-direction: column; justify-content: center; align-items: center;">
                            <div class="text-center" style="max-width: 1200px; width: 90%;">
                                <!-- Global Score Display - Smaller -->
                                <div class="global-score-display mb-4">
                                    <div class="global-score-badge" style="background: linear-gradient(135deg, #ffffff, #f8fafc); color: #1e40af; padding: 2rem; border-radius: 15px; box-shadow: 0 0 20px rgba(30, 64, 175, 0.3); border: 2px solid #60a5fa;">
                                        <h1 class="display-1 mb-2" id="global-score-total" style="font-weight: 800; font-size: 80pt;">0</h1>
                                        <p class="lead mb-0" style="font-size: 20pt; text-transform: uppercase;">Score Global</p>
                                    </div>
                                </div>
                                
                                <!-- Score Breakdown - Smaller -->
                                <div class="score-breakdown mb-4">
                                    <h5 class="mb-3" style="color: #ffffff; font-size: 20pt; text-transform: uppercase; text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);">Detail by Phase</h5>
                                    <div class="row justify-content-center" id="global-score-breakdown">
                                        <!-- Score breakdown will be populated here -->
                                    </div>
                                </div>
                                
                                <!-- Progress Bar -->
                                <div class="progress-info mb-5">
                                    <div class="progress" style="height: 30px; background: rgba(8, 239, 255, 0.2); border-radius: 15px;">
                                        <div class="progress-bar" id="global-progress-bar" role="progressbar" style="width: 0%; background: linear-gradient(90deg, #08efff, #00b3bc); border-radius: 15px;"></div>
                                    </div>
                                    <div class="mt-3" id="global-progress-text" style="color: #08efff; font-size: 20pt;">Progress: 0/15</div>
                                </div>
                                
                                <!-- MOT Status Squares -->
                                <div class="mot-status mb-5">
                                    <h6 class="mb-4" style="color: #08efff; font-size: 25pt; text-transform: uppercase;">Phase Status</h6>
                                    <div class="mot-status-squares" id="global-mot-squares" style="display: flex; justify-content: center; gap: 2rem; flex-wrap: wrap;">
                                        <!-- MOT status squares will be populated here -->
                                    </div>
                                </div>
                                
                                <!-- Continue Button -->
                                <div class="continue-section">
                                    <button id="global-continue-btn" class="NeonButton" style="border: 6px solid #08efff; border-radius: 20px; color: #08efff; background: none; cursor: pointer; display: inline-flex; align-items: center; justify-content: center; font-size: 25pt; padding: 25px 50px; text-transform: uppercase; filter: drop-shadow(0 0 5px #08EFFF); transition: all 0.3s ease;">
                                        Continuer
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        
        // Add event listener for continue button
        document.getElementById('global-continue-btn').addEventListener('click', () => {
            console.log('Global continue button clicked');
            console.log('Current phase number:', this.currentPhaseNumber);
            
            const modal = bootstrap.Modal.getInstance(document.getElementById('globalScoreRecapModal'));
            console.log('Modal instance:', modal);
            modal.hide();
            
            console.log('Calling proceedToActualNextPhase with:', this.currentPhaseNumber);
            this.proceedToActualNextPhase(this.currentPhaseNumber);
        });
    }

    updateGlobalScoreRecapContent(phaseNumber, scoreData) {
        console.log('Updating global score recap with phaseNumber:', phaseNumber, 'scoreData:', scoreData);
        
        // Update global score total
        document.getElementById('global-score-total').textContent = scoreData.total;
        
        // Update progress bar
        const progressPercentage = (scoreData.total / 15) * 100;
        document.getElementById('global-progress-bar').style.width = `${progressPercentage}%`;
        document.getElementById('global-progress-text').textContent = `Progress: ${scoreData.total}/15`;
        
        // Update score breakdown with original game style
        const breakdownContainer = document.getElementById('global-score-breakdown');
        breakdownContainer.innerHTML = '';
        
        console.log('Score entries:', Object.entries(scoreData.scores));
        Object.entries(scoreData.scores).forEach(([mot, score]) => {
            const phaseNum = mot.replace('mot', '');
            const phaseTitles = {
                1: 'Embedding GenAI',
                2: 'Building Foundation',
                3: 'Scaling Organization',
                4: 'Ensuring Success',
                5: 'Accelerating Transformation'
            };
            
            console.log(`Processing ${mot} -> Phase ${phaseNum} with score:`, score);
            
            const col = document.createElement('div');
            col.className = 'col-md-6 col-lg-4 mb-3';
            col.innerHTML = `
                <div style="background: rgba(255, 255, 255, 0.15); padding: 1.5rem; border-radius: 12px; border-left: 3px solid #60a5fa; margin-bottom: 0.8rem; backdrop-filter: blur(10px);">
                    <div style="color: #ffffff; font-size: 18pt; font-weight: bold; text-transform: uppercase;">Phase ${phaseNum}: ${score}/3</div>
                    <div style="color: #f8fafc; font-size: 14pt; margin-top: 0.3rem;">${phaseTitles[phaseNum] || mot}</div>
                </div>
            `;
            breakdownContainer.appendChild(col);
        });
        
        // Update MOT status squares with original game style
        const squaresContainer = document.getElementById('global-mot-squares');
        squaresContainer.innerHTML = '';
        
        for (let i = 1; i <= 5; i++) {
            const motKey = `mot${i}`;
            const score = scoreData.scores[motKey] || 0;
            const isCompleted = score > 0;
            const isCurrent = i === motNumber;
            
            const square = document.createElement('div');
            square.style.cssText = `
                width: 60px;
                height: 60px;
                border-radius: 12px;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                background: ${isCompleted ? 'linear-gradient(135deg, #ffffff, #f8fafc)' : 'rgba(255, 255, 255, 0.2)'};
                border: 2px solid ${isCurrent ? '#f59e0b' : '#60a5fa'};
                transition: all 0.3s ease;
                position: relative;
                color: ${isCompleted ? '#1e40af' : '#ffffff'};
                box-shadow: ${isCompleted ? '0 0 20px rgba(30, 64, 175, 0.3)' : 'none'};
            `;
            
            if (isCurrent) {
                square.style.animation = 'pulse 1s infinite';
            }
            
            square.innerHTML = `
                <div style="font-weight: bold; font-size: 1.2rem;">${i}</div>
                <div style="font-size: 0.8rem; margin-top: 0.1rem;">${'★'.repeat(score)}${'☆'.repeat(3 - score)}</div>
            `;
            squaresContainer.appendChild(square);
        }
    }


    hideScoreScreen() {
        // Hide score display card
        document.getElementById('score-display-card').style.display = 'none';
    }

    // Version 1.4: Function to get current score data from DOM elements
    getCurrentScoreData() {
        const scores = {};
        let total = 0;
        
        // Get scores from DOM elements
        for (let i = 1; i <= 5; i++) {
            const scoreElement = document.getElementById(`mot${i}-score`);
            if (scoreElement) {
                const score = parseInt(scoreElement.textContent) || 0;
                scores[`mot${i}`] = score;
                total += score;
            } else {
                scores[`mot${i}`] = 0;
            }
        }
        
        return {
            scores: scores,
            total: total
        };
    }
    
    proceedToNextPhase(currentPhase) {
        console.log('=== proceedToNextPhase called ===');
        console.log('Current Phase:', currentPhase);
        console.log('this.currentPhaseNumber:', this.currentPhaseNumber);
        
        // Hide modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('scoreModal'));
        console.log('Modal instance:', modal);
        if (modal) {
            modal.hide();
            console.log('Modal hidden');
        }
        
        // Force remove modal backdrop and body classes
        document.querySelectorAll('.modal-backdrop').forEach(backdrop => {
            backdrop.remove();
        });
        document.body.classList.remove('modal-open');
        document.body.style.overflow = '';
        document.body.style.paddingRight = '';
        
        // Version 1.4: Show global score recap before proceeding to next MOT
        // Get score data from the current score display elements
        const currentScore = this.getCurrentScoreData();
        console.log('Current score data:', currentScore);
        console.log('About to show global score recap for Phase:', currentPhase);
        this.showGlobalScoreRecap(currentPhase, currentScore);
    }

    proceedToActualNextPhase(currentPhase) {
        console.log('=== proceedToActualNextPhase called ===');
        console.log('Actually proceeding to next Phase from:', currentPhase);
        console.log('Current selectedChoices:', this.selectedChoices);
        
        switch(currentPhase) {
            case 1:
                console.log('Loading Phase2...');
                this.loadPhase2Choices();
                break;
            case 2:
                console.log('Loading Phase3...');
                this.loadPhase3Choices();
                break;
            case 3:
                console.log('Loading Phase4...');
                this.loadPhase4Choices();
                break;
            case 4:
                console.log('Loading Phase5...');
                this.loadPhase5Choices();
                break;
            case 5:
                console.log('Game finished, showing results...');
                this.showResults();
                break;
            default:
                console.error('Unknown phase number:', currentPhase);
        }
        
        console.log('=== proceedToActualNextPhase completed ===');
    }

    loadNextSection() {
        if (!this.selectedChoices.phase1) {
            this.loadPhase1Choices();
        } else if (this.selectedChoices.phase2.length === 0) {
            this.loadPhase2Choices();
        } else if (Object.keys(this.selectedChoices.phase3).length === 0) {
            this.loadMOT3Choices();
        } else if (this.selectedChoices.phase4.length === 0) {
            this.loadMOT4Choices();
        } else if (!this.selectedChoices.phase5) {
            this.loadMOT5Choices();
        }
    }

    showResults(results) {
        const container = document.getElementById('results-content');
        container.innerHTML = `
            <div class="text-center">
                <h2 class="mb-4">🎉 Félicitations !</h2>
                <div class="row mb-4">
                    <div class="col-md-6">
                        <h4>Score Final</h4>
                        <div class="display-4 text-primary">${results.total}/15</div>
                        <div class="h3">
                            ${'★'.repeat(results.stars)}${'☆'.repeat(3 - results.stars)}
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h4>Detail by Phase</h4>
                        <div class="text-start">
                            <div class="mb-2">Embedding GenAI in your AI transformation program: <span class="score-badge">${results.scores.phase1}/3</span></div>
                            <div class="mb-2">Building the right foundation: <span class="score-badge">${results.scores.phase2}/3</span></div>
                            <div class="mb-2">Scaling across the organization: <span class="score-badge">${results.scores.phase3}/3</span></div>
                            <div class="mb-2">Ensuring sustainable success: <span class="score-badge">${results.scores.phase4}/3</span></div>
                            <div class="mb-2">Accelerating the transformation: <span class="score-badge">${results.scores.phase5}/3</span></div>
                        </div>
                    </div>
                </div>
                <div class="alert alert-info">
                    <h5>Votre Performance</h5>
                    <p>${this.getPerformanceMessage(results.stars)}</p>
                </div>
            </div>
        `;
        
        this.showSection('results-section');
    }

    getPerformanceMessage(stars) {
        switch (stars) {
            case 3:
                return 'Excellent travail ! Vous avez maîtrisé tous les aspects de la transformation GenAI.';
            case 2:
                return 'Bon travail ! Vous avez une bonne compréhension de la transformation GenAI.';
            case 1:
                return 'Continuez à apprendre ! Il y a encore des opportunités d\'amélioration.';
            default:
                return 'Merci d\'avoir joué !';
        }
    }

    resetGame() {
        this.currentState = 'login';
        this.selectedChoices = {
            phase1: null,
            phase2: [],
            phase3: {},
            phase4: [],
            phase5: null
        };
        this.budget = 0;
        
        // Reset UI
        document.getElementById('login-section').style.display = 'block';
        document.getElementById('results-section').style.display = 'none';
        document.getElementById('progress-card').style.display = 'none';
        
        // Reset form
        document.getElementById('username').value = '';
        
        this.updateProgress(0, 'Prêt à recommencer');
    }

    showLoading(show) {
        const modalElement = document.getElementById('loadingModal');
        
        if (show) {
            modalElement.style.display = 'block';
            modalElement.classList.add('show');
            document.body.classList.add('modal-open');
        } else {
            modalElement.style.display = 'none';
            modalElement.classList.remove('show');
            document.body.classList.remove('modal-open');
        }
    }

    forceCloseModal() {
        this.showLoading(false);
    }
}


// Harnessing Video Management
let harnessingVideoElement;

function initializeHarnessingVideo() {
    const harnessingVideoElement = document.getElementById('harnessing-video');
    if (harnessingVideoElement) {
        // Quand la vidéo se termine, afficher le bouton "Démarrer le Jeu"
        harnessingVideoElement.addEventListener('ended', function() {
            document.getElementById('skip-harnessing-btn').style.display = 'none';
            document.getElementById('start-game-after-harnessing-btn').style.display = 'inline-block';
        });
        
        // Utiliser la fonction générique pour l'autoplay avec son
        initializeVideoWithSound('harnessing-video');
    }
}

// Fonction générique pour initialiser les vidéos avec autoplay et son
function initializeVideoWithSound(videoId) {
    const videoElement = document.getElementById(videoId);
    if (videoElement) {
        // Essayer de démarrer la vidéo avec son
        videoElement.play().catch(function(error) {
            console.log(`${videoId} autoplay failed:`, error);
            // Si l'autoplay échoue, essayer sans son puis permettre l'activation du son
            videoElement.muted = true;
            videoElement.play().then(() => {
                console.log(`${videoId} started muted, user can unmute`);
            }).catch(function(error2) {
                console.log(`${videoId} autoplay completely failed:`, error2);
            });
        });
        
        // Ajouter un gestionnaire pour permettre l'activation du son
        videoElement.addEventListener('click', function() {
            if (videoElement.muted) {
                videoElement.muted = false;
                console.log(`${videoId} unmuted by user interaction`);
            }
        });
        
        // Ajouter un gestionnaire pour les interactions utilisateur
        videoElement.addEventListener('play', function() {
            if (videoElement.muted) {
                console.log(`${videoId} playing muted - user can click to unmute`);
            }
        });
    }
}

// Phase1 Video Management
function initializePhase1Video() {
    initializeVideoWithSound('phase1-video');
}

// Intro Video Management
function initializeIntroVideo() {
    const introVideoElement = document.getElementById('intro-video');
    if (introVideoElement) {
        // Quand la vidéo se termine, afficher le bouton "Start Game"
        introVideoElement.addEventListener('ended', function() {
            document.getElementById('skip-video-btn').style.display = 'none';
            document.getElementById('start-game-btn').style.display = 'inline-block';
        });
        
        // Utiliser la fonction générique pour l'autoplay avec son
        initializeVideoWithSound('intro-video');
    }
}

// Initialize game controller
const gameController = new GameController();
window.gameController = gameController;

// Global function for MOT2 choice selection
function selectMOT2Choice(choiceId) {
    if (window.gameController) {
        gameController.selectMOT2Choice(choiceId);
    }
}


// Global function for MOT4 choice selection
function selectMOT4Choice(choiceId, cost) {
    if (window.gameController) {
        gameController.selectMOT4Choice(choiceId, cost);
    }
}

// Test simple pour vérifier que le JavaScript fonctionne
console.log('GameController initialized:', gameController);
console.log('selectMOT1Choice function exists:', typeof gameController.selectMOT1Choice);
