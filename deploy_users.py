#!/usr/bin/env python3
"""
Script de d√©ploiement s√©curis√© pour cr√©er les utilisateurs par d√©faut
√Ä utiliser uniquement lors du d√©ploiement initial
"""

import os
import sqlite3
import hashlib
import secrets
from datetime import datetime

def hash_password(password: str) -> str:
    """Hash un mot de passe avec SHA-256"""
    return hashlib.sha256(password.encode()).hexdigest()

def create_default_users():
    """Cr√©e les utilisateurs par d√©faut depuis les variables d'environnement"""
    db_path = "users.db"
    
    # R√©cup√©ration des identifiants depuis les variables d'environnement
    admin_username = os.environ.get('ADMIN_USERNAME', 'admin')
    admin_password = os.environ.get('ADMIN_PASSWORD')
    trainer_username = os.environ.get('TRAINER_USERNAME', 'trainer')
    trainer_password = os.environ.get('TRAINER_PASSWORD')
    
    if not admin_password or not trainer_password:
        print("‚ùå Erreur: Les variables d'environnement ADMIN_PASSWORD et TRAINER_PASSWORD doivent √™tre d√©finies")
        print("Exemple: export ADMIN_PASSWORD='votre_mot_de_passe_admin'")
        print("         export TRAINER_PASSWORD='votre_mot_de_passe_trainer'")
        return False
    
    # Connexion √† la base de donn√©es
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # Cr√©ation de la table si elle n'existe pas
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            email TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL,
            salt TEXT NOT NULL,
            role TEXT NOT NULL DEFAULT 'user',
            created_at TEXT NOT NULL,
            last_login TEXT,
            is_active BOOLEAN NOT NULL DEFAULT 1
        )
    ''')
    
    users = [
        {
            'username': admin_username,
            'email': f'{admin_username}@playnext.com',
            'password': admin_password,
            'role': 'admin'
        },
        {
            'username': trainer_username,
            'email': f'{trainer_username}@playnext.com',
            'password': trainer_password,
            'role': 'trainer'
        }
    ]
    
    created_count = 0
    
    for user_data in users:
        try:
            # V√©rifier si l'utilisateur existe d√©j√†
            cursor.execute('SELECT id FROM users WHERE username = ?', (user_data['username'],))
            if cursor.fetchone():
                print(f"‚ÑπÔ∏è  Utilisateur '{user_data['username']}' existe d√©j√†")
                continue
            
            # Cr√©er le salt et hasher le mot de passe
            salt = secrets.token_hex(16)
            password_hash = hash_password(user_data['password'])
            
            # Ins√©rer l'utilisateur
            cursor.execute('''
                INSERT INTO users (username, email, password_hash, salt, role, created_at, is_active)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (
                user_data['username'],
                user_data['email'],
                password_hash,
                salt,
                user_data['role'],
                datetime.now().isoformat(),
                1
            ))
            
            print(f"‚úÖ Utilisateur '{user_data['username']}' cr√©√© avec succ√®s")
            created_count += 1
            
        except sqlite3.Error as e:
            print(f"‚ùå Erreur lors de la cr√©ation de l'utilisateur '{user_data['username']}': {e}")
    
    # Valider les changements
    conn.commit()
    conn.close()
    
    print(f"üéâ {created_count} utilisateur(s) cr√©√©(s) avec succ√®s !")
    return True

if __name__ == "__main__":
    print("üîê Script de d√©ploiement s√©curis√©")
    print("‚ö†Ô∏è  Assurez-vous que les variables d'environnement sont d√©finies")
    create_default_users()
